from numpy import *
from ML2.kNN import *


# 可以返回数组各个维度的长度
print("shape属性")
a = array([[1, 2, 3], [4, 5, 6]])
b = array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a)
print(a.shape)
print(b)
print(b.shape)
'''
结果集：
[[1 2 3]
 [4 5 6]]
(2, 3)
[[1 2 3]
 [4 5 6]
 [7 8 9]]
(3, 3)
'''
print("====================================")

# 函数形式：tile(A，rep)
# 功能：重复A的各个维度
# 参数类型：
#   - A: Array类的都可以
#   - rep：A沿着各个维度重复的次数（数组长度3，每个元素内再重复2次）
print("tile函数")
print(tile([1, 2], (3, 2)))
a = tile([1, 2], (3, 2))
print(a)
'''
结果集：
[[1 2 1 2]
 [1 2 1 2]
 [1 2 1 2]]
 '''
print("====================================")

# 分别取各个维度的元素的和
print("sum函数")
group = array([[[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10]],
               [[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10]]])
print(group)
print("第一维度和:")
print(group.sum(axis=0))
print("第二维度和:")
print(group.sum(axis=1))
print("第三维度和:")
print(group.sum(axis=2))
'''
结果集：
[[[ 1  2  3  4]
  [ 4  5  6  7]
  [ 7  8  9 10]]

 [[ 1  2  3  4]
  [ 4  5  6  7]
  [ 7  8  9 10]]]
第一维度和:
[[ 2  4  6  8]
 [ 8 10 12 14]
 [14 16 18 20]]
第二维度和:
[[12 15 18 21]
 [12 15 18 21]]
第三维度和:
[[10 22 34]
 [10 22 34]]
'''
print("====================================")

# 返回数组值从小到大的索引值
# [4,5,1]中，‘4’的索引是0，‘5’的索引是1，‘1’的索引是2。
# 从小到大排列，就是1、4、5，对应索引就是2、0、1
print("argsort函数")
a = array([4, 5, 1])
print(a)
print(a.argsort())
'''
结果集：
[4 5 1]
[2 0 1]
'''
print("====================================")

# iterable：是可迭代类型;
# cmp：用于比较的函数，比较什么由key决定,有默认值，迭代集合中的一项;
# key：用列表元素的某个属性和函数进行作为关键字，有默认值，迭代集合中的一项;
# reverse：排序规则. reverse = True 或者 reverse = False，有默认值。
# 返回值：是一个经过排序的可迭代类型，与iterable一样
# 参考：http://www.cnblogs.com/65702708/archive/2010/09/14/1826362.html
print("sorted函数")
print(sorted([5, 2, 3, 1, 4], reverse=True))
'''
结果集：
[5, 4, 3, 2, 1]
'''
print("====================================")
